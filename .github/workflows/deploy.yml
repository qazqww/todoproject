name: Deploy to server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      BACK_IMAGE_NAME: qazqww/todoback
      FRONT_IMAGE_NAME: qazqww/todofront

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD

      - name: Build Backend Docker Images and Push to Docker Hub
        run: |
          set -euo pipefail
          IMAGE_TAG="$(git rev-parse --short HEAD)"
          echo "BACK_IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_ENV"
          docker build -t "$BACK_IMAGE_NAME:$IMAGE_TAG" ./todoback
          docker push "$BACK_IMAGE_NAME:$IMAGE_TAG"

      - name: Build Frontend Docker Images and Push to Docker Hub
        run: |
          set -euo pipefail
          IMAGE_TAG="$(git rev-parse --short HEAD)"
          echo "FRONT_IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_ENV"
          docker build -t "$FRONT_IMAGE_NAME:$IMAGE_TAG" ./todofront
          docker push "$FRONT_IMAGE_NAME:$IMAGE_TAG"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "
            set -euo pipefail

            cd /home/$EC2_USER/todoproject
            git fetch --all
            git reset --hard origin/main

            cat > deploy.env <<EOF
            BACK_IMAGE_NAME=qazqww/todoback
            BACK_IMAGE_TAG=${GITHUB_SHA::8}
            FRONT_IMAGE_NAME=qazqww/todofront
            FRONT_IMAGE_TAG=${GITHUB_SHA::8}
            EOF

            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
            sudo docker compose pull
            sudo docker compose up -d --remove-orphans
            docker image prune -f
            "
